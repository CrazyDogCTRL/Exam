// билет 12
// ЗНаибольшая общая подпоследовательность.

#include <iostream>

template <typename T>
T Max(T a, T b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

template <typename T>
int ValueLCS(T* a, T* b, size_t n, size_t m) } // O(n*m)
  ++n;
  ++m;
  auto** dp = new int*[n];
  for (int i = 0; i < n; i++) {
    dp[i] = new int[m]{};
  }
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      dp[i][j] = Max(dp[i - 1][j], dp[i][j - 1]);
      if (a[i - 1] == b[j - 1]) {
        dp[i][j] = Max(dp[i - 1][j - 1] + 1, dp[i][j]);
      }
    }
  }
  int result = dp[n - 1][m - 1];
  for (int i = 0; i < n; i++) {
    delete[] dp[i];
  }
  delete[] dp;
  return result;
}

template <typename T>
void LCS(T* a, T* b, size_t n, size_t m) {
  ++n;
  ++m;
  auto** dp = new int*[n];
  for (int i = 0; i < n; i++) {
    dp[i] = new int[m]{};
  }
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      dp[i][j] = Max(dp[i - 1][j], dp[i][j - 1]);
      if (a[i - 1] == b[j - 1]) {
        dp[i][j] = Max(dp[i - 1][j - 1] + 1, dp[i][j]);
      }
    }
  }
  n--;
  m--;
  size_t i = m;
  size_t j = n;
  T* lcs = new T[dp[n][m]];
  int index = dp[n][m] - 1;
  while (i > 0 && j > 0) {
    if (a[i - 1] == b[j - 1]) {
      lcs[index] = a[i - 1];
      --i;
      --j;
      --index;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
      --i;
    } else {
      --j;
    }
  }
  for (int i = 0; i < dp[n][m]; i++) {
    std::cout << lcs[i] << " ";
  }
  delete[] lcs;
  for (int i = 0; i <= n; i++) {
    delete[] dp[i];
  }
  delete[] dp;
}

int main() {
  auto* a = new char[3]{'a', 'b', 'c'};
  auto* b = new char[3]{'b', 'a', 'c'};
  std::cout << ValueLCS(a, b, 3, 3) << " ";
  LCS(a, b, 3, 3);
  delete[] a;
  delete[] b;
}
