// –±–∏–ª–µ—Ç 13
// –ù–∞–∏–±–æ–ª—å—à–∞—è –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∞—è –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞ ùí™(ùëÅ2).

#include <iostream>

template <typename T>
T Max(T* a, int j) {
  T max = a[0];
  for (int i = 1; i < j; i++) {
    if (max < a[i])
      max = a[i];
  }
  return max;
}

template <typename T>
int ValueLIS(T* a, int n) {
  auto* dp = new int[n]{};
  for (int i = 0; i < n; i++) {
    int max = 0;
    for (int j = 0; j < i; j++) {
      if (a[j] < a[i] && dp[j] > max)
        max = dp[j];
    }
    dp[i] = max + 1;
  }
  int result = Max(dp, n);
  delete[] dp;
  return result;
}

template <typename T>
void PushLIS(T* a, int n) {
  auto* dp = new int[n]{};
  auto* prev = new int[n];
  std::fill_n(prev, n, -1);
  for (int i = 0; i < n; i++) {
    int max = 0;
    for (int j = 0; j < i; j++) {
      if (a[j] < a[i] && dp[j] > max) {
        max = dp[j];
        prev[i] = j;
      }
    }
    dp[i] = max + 1;
  }
  int result = Max(dp, n);
  std::cout << "Length of LIS: " << result << std::endl;
  int index = 0;
  while (index < n && dp[index] != result) {
    index++;
  }
  int* res = new int[result];
  int currIndex = index;
  for (int i = result - 1; i >= 0; i--) {
    res[i] = a[currIndex];
    currIndex = prev[currIndex];
  }
  for (int i = 0 ; i < result; i++) {
    std::cout << res[i] << " ";
  }
  std::cout << std::endl;

  delete[] dp;
  delete[] prev;
  delete[] res;
}
